service: us-covid-stats

configValidationMode: error

custom:
  pythonRequirements:
    dockerizePip: 'non-linux'
    slim: true
  cfResources: ${file(./cloudformation.yml):Resources}
  cfOutputs: ${file(./cloudformation.yml):Outputs}
  subscriptionEnabled: ${env:SUBSCRIPTION_ENABLED, 'no'}
  subscription:
    yes:
      - Endpoint: ${env:SUBSCRIPTION_EMAIL, ''}
        Protocol: email
    no: []

provider:
  name: aws
  runtime: python3.8
  stage: ${env:STAGE,'main'}
  region: ${env:AWS_REGION,'us-east-1'}
  logRetentionInDays: 1
  memorySize: 3008
  timeout: 20
  versionFunctions: false
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:GetItem
        - dynamodb:BatchWriteItem
      Resource:
        - !GetAtt DataTable.Arn
    - Effect: Allow
      Action:
        - s3:*
      Resource:
        - !GetAtt DataBucket.Arn
        - !Join [ '/', [ !GetAtt DataBucket.Arn, '*' ]  ]
    - Effect: Allow
      Action:
        - sns:Publish
      Resource:
        - !Ref OnRefreshDataFromSourcesNotification
  environment:
    SERVICE_NAME: ${self:service}
    DATA_TABLE: !Ref DataTable
    DATA_BUCKET: !Ref DataBucket
    NOTIFICATION_TOPIC: !Ref OnRefreshDataFromSourcesNotification
    FRONTEND_URL: !Join ['', ['https://', !GetAtt FrontendDistribution.DomainName]]
  httpApi:
    payload: '2.0'
    cors: true
  tags:
    project: ${self:service}

plugins:
  - serverless-python-requirements

package:
  include:
    - '!**'
    - 'us_covid_stats/**'
  exclude:
    - '**/tests/**'
    - 'us_covid_stats/conftest.py'


functions:
  RefreshDataFromSources:
    handler: us_covid_stats/etl/handler.refresh_data_from_sources
    events:
      - schedule:
          enabled: false
          rate: rate(1 day)
      - cloudwatchEvent:
          enabled: false
          event:
            source:
              - aws.codebuild
            detail-type:
              - CodeBuild Build State Change
            detail:
              build-status:
                - SUCCEEDED
              project-name:
                - us-covid-stats-deployment-backend
    destinations:
      onSuccess: OnRefreshDataFromSources
      onFailure: OnRefreshDataFromSources
  OnRefreshDataFromSources:
    handler: us_covid_stats/etl/handler.on_refresh_data_from_sources
  GetData:
    handler: us_covid_stats/rest/handler.get_data
    events:
      - httpApi:
          method: GET
          path: /data
      - httpApi:
          method: GET
          path: /daily
      - httpApi:
          method: GET
          path: /weekly
      - httpApi:
          method: GET
          path: /monthly

resources:
  extensions:
    HttpApi:
      Properties:
        CorsConfiguration:
          AllowOrigins:
            - !Join ['', ['https://', !GetAtt FrontendDistribution.DomainName]]
            - http://localhost:3000
          AllowHeaders:
            - authorization
            - content-type
            - x-amz-date
            - x-amz-security-token
            - x-amz-user-agent
            - x-api-key
          AllowMethods:
            - OPTIONS
            - GET
  Resources:
    ReactAppBackendUrlParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: REACT_APP_BACKEND_URL
        Type: String
        Value: !Join [ '', [ 'https://', !Ref HttpApi, '.execute-api.', !Ref 'AWS::Region', '.', !Ref 'AWS::URLSuffix' ] ]
    OnRefreshDataFromSourcesNotification:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: US COVID Stats
        Subscription: ${self:custom.subscription.${self:custom.subscriptionEnabled}}
    DataTable: ${self:custom.cfResources.DataTable}
    DataBucket: ${self:custom.cfResources.DataBucket}
    FrontendBucket: ${self:custom.cfResources.FrontendBucket}
    FrontendBucketPolicy: ${self:custom.cfResources.FrontendBucketPolicy}
    CloudFrontOriginAccessIdentity: ${self:custom.cfResources.CloudFrontOriginAccessIdentity}
    FrontendDistribution: ${self:custom.cfResources.FrontendDistribution}
    FrontendBucketParameter: ${self:custom.cfResources.FrontendBucketParameter}
    FrontendDistributionParameter: ${self:custom.cfResources.FrontendDistributionParameter}
  Outputs:
    DataBucketName: ${self:custom.cfOutputs.DataBucketName}
    FrontendBucketName: ${self:custom.cfOutputs.FrontBucketName}
    FrontendDistributionId: ${self:custom.cfOutputs.FrontendDistribution}
    FrontendUrl: ${self:custom.cfOutputs.FrontendUrl}
